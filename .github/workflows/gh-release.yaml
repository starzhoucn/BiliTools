name: gh-release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    if: github.repository == 'catlair/BiliTools'
    runs-on: ubuntu-latest
    environment: Build
    env:
      IS_PROD: ${{ startsWith(github.ref, 'refs/tags/v') }}
      IS_RC: ${{ contains(github.ref, '-rc') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: |
          rm yarn.lock
          jq '( .optionalDependencies )' package.json > optionalDependencies.json
          jq 'del( .optionalDependencies )' package.json > temp.json
          mv temp.json package.json
          yarn install
          npm install -g rollup
      - name: set Docker version tag for prod
        if: ${{ env.IS_PROD == 'true' }}
        run: |
          echo DOCKER_TAG=${{ github.ref  }} | sed -e "s/refs\/tags\/v//g" >> $GITHUB_ENV
      - name: set Docker version tag for dev
        if: ${{ env.IS_PROD == 'false' }}
        run: |
          echo DOCKER_TAG=$(date)-dev >> $GITHUB_ENV
      - name: Build and ZIP CFC
        run: |
          yarn build:baidu
          echo ${{ env.DOCKER_TAG }} >> dist/version.txt
          cp -rf ./tools/ ./package*.json yarn.lock ./docker/.yarnclean ./node_modules/ ./dist/
          cd dist
          npm prune --production
          yarn autoclear
          mv index.cfc.js cfc
          rm -rf index*.js tools package*.json yarn.lock .yarnclean
          mv cfc index.js
          zip -r -q ../baidu_cfc.zip .
      - name: Build Babel
        run: |
          yarn build
          echo ${{ env.DOCKER_TAG }} >> dist/version.txt
          cp config/config.single.json dist/config/config.json
          cd dist
          mv index.js index.local.js
          mv index.scf.js ../
          mv index.fc.js ../
      - name: ZIP SCF
        run: |
          cp -rf ./tools/ ./package*.json yarn.lock ./docker/.yarnclean ./node_modules/ ./dist/
          mv ./index.scf.js ./dist/index.js
          cd dist
          yarn add tencentcloud-sdk-nodejs
          npm prune --production
          yarn autoclear
          rm -rf tools package*.json yarn.lock .yarnclean
          zip -r -q ../tencent_scf.zip *
          rm -rf node_modules
      - name: ZIP FC
        run: |
          cp -rf ./tools/ ./package*.json yarn.lock ./docker/.yarnclean ./node_modules/ ./dist/
          mv ./index.fc.js ./dist/index.js
          cd dist
          # yarn add @alicloud/fc2 # 自带 fc2
          npm prune --production
          yarn autoclear
          rm -rf tools package*.json yarn.lock .yarnclean
          zip -r -q ../aliyun_fc.zip *
      - name: Build Rollup
        run: |
          cat package.json | jq .optionalDependencies="$(cat optionalDependencies.json)" > demo.json
          mv demo.json package.json
          yarn
          yarn build:rollup
          cp dist/rollup gh-release -r
      - name: ZIP huawei AGC
        run: |
          mkdir temp
          cp dist/rollup/index.agc.js temp/index.js
          cd temp
          zip -r -q ../huawei_agc.zip index.js
      - name: Commit files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'release: Commit from GitHub Actions (gh-release)'
          branch: ${{ env.IS_PROD && 'gh-release' || 'gh-release-dev' }}
          commit_options: '--no-verify --signoff'
          file_pattern: gh-release/**
          push_options: '--force'
          skip_fetch: true
          skip_checkout: true
          create_branch: true
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            tencent_scf.zip
            aliyun_fc.zip
            baidu_cfc.zip
            huawei_agc.zip
            gh-release/index.js
            gh-release/cat_bili_ql.js
          draft: ${{ env.IS_PROD == 'false' }}
          prerelease: ${{ env.IS_PROD == 'true' && env.IS_RC == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
